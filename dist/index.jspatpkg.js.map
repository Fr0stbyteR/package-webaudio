{"version":3,"file":"index.jspatpkg.js","mappings":"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","sources":["webpack://@jspatcher/package-webaudio/./src/index.ts","webpack://@jspatcher/package-webaudio/./src/objects/Analyser.ts","webpack://@jspatcher/package-webaudio/./src/objects/AnyNode.ts","webpack://@jspatcher/package-webaudio/./src/objects/AudioIn.ts","webpack://@jspatcher/package-webaudio/./src/objects/AudioOut.tsx","webpack://@jspatcher/package-webaudio/./src/objects/Biquad.ts","webpack://@jspatcher/package-webaudio/./src/objects/BufferSource.ts","webpack://@jspatcher/package-webaudio/./src/objects/Compressor.ts","webpack://@jspatcher/package-webaudio/./src/objects/Constant.ts","webpack://@jspatcher/package-webaudio/./src/objects/Convolver.ts","webpack://@jspatcher/package-webaudio/./src/objects/Delay.ts","webpack://@jspatcher/package-webaudio/./src/objects/Destination.ts","webpack://@jspatcher/package-webaudio/./src/objects/Gain.ts","webpack://@jspatcher/package-webaudio/./src/objects/IIRFilter.ts","webpack://@jspatcher/package-webaudio/./src/objects/Media.ts","webpack://@jspatcher/package-webaudio/./src/objects/Merger.ts","webpack://@jspatcher/package-webaudio/./src/objects/Oscillator.ts","webpack://@jspatcher/package-webaudio/./src/objects/Panner.ts","webpack://@jspatcher/package-webaudio/./src/objects/Splitter.ts","webpack://@jspatcher/package-webaudio/./src/objects/StereoPanner.ts","webpack://@jspatcher/package-webaudio/./src/objects/StreamDestination.ts","webpack://@jspatcher/package-webaudio/./src/objects/StreamSource.ts","webpack://@jspatcher/package-webaudio/./src/objects/WaveShaper.ts","webpack://@jspatcher/package-webaudio/./src/objects/audioContext.ts","webpack://@jspatcher/package-webaudio/./src/objects/audioWorklet.ts","webpack://@jspatcher/package-webaudio/./src/objects/base.ts","webpack://@jspatcher/package-webaudio/./src/package-info.ts","webpack://@jspatcher/package-webaudio/./src/sdk.ts","webpack://@jspatcher/package-webaudio/./src/utils.ts","webpack://@jspatcher/package-webaudio/webpack/bootstrap","webpack://@jspatcher/package-webaudio/webpack/runtime/create fake namespace object","webpack://@jspatcher/package-webaudio/webpack/runtime/define property getters","webpack://@jspatcher/package-webaudio/webpack/runtime/hasOwnProperty shorthand","webpack://@jspatcher/package-webaudio/webpack/runtime/make namespace object","webpack://@jspatcher/package-webaudio/./src/index.jspatpkg.ts"],"sourcesContent":["import packageInfo from \"./package-info\";\r\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\r\n\r\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\r\n\r\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\r\n\r\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;","import WebAudioObject from \"./base\";\r\nimport { Bang, isBang } from \"../sdk\";\r\nimport type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\n\r\ninterface P {\r\n    fftSize: 32 | 64 | 128 | 256 | 512 | 1024 | 2048 | 4096 | 8192 | 16384 | 32768;\r\n    minDecibels: number;\r\n    maxDecibels: number;\r\n    smoothingTimeConstant: number;\r\n};\r\ntype I = [Bang, Float32Array, Uint8Array, Float32Array, Uint8Array, Partial<P>];\r\ntype O = [null, Float32Array, Uint8Array, Float32Array, Uint8Array, AnalyserNode];\r\nexport default class Analyser extends WebAudioObject<AnalyserNode, {}, I, O, [], P> {\r\n    static description = \"WebAudio AnalyserNode\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"signal\",\r\n        description: \"Node connection, bang to output AnalyserNode instance\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"object\",\r\n        description: \"getFloatTimeDomainData(): Float32Array\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"object\",\r\n        description: \"getByteTimeDomainData(): Uint8Array\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"object\",\r\n        description: \"getFloatFrequencyData(): Float32Array\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"object\",\r\n        description: \"getByteFrequencyData(): Uint8Array\"\r\n    }, {\r\n        isHot: false,\r\n        type: \"object\",\r\n        description: \"Options: { fftSize, minDecibels, maxDecibels, smoothingTimeConstant }\"\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"signal\",\r\n        description: \"Node connection\"\r\n    }, {\r\n        type: \"object\",\r\n        description: \"getFloatTimeDomainData result\"\r\n    }, {\r\n        type: \"object\",\r\n        description: \"getByteTimeDomainData result\"\r\n    }, {\r\n        type: \"object\",\r\n        description: \"getFloatFrequencyData result\"\r\n    }, {\r\n        type: \"object\",\r\n        description: \"getByteFrequencyData result\"\r\n    }, {\r\n        type: \"object\",\r\n        description: \"Instance: AnalyserNode\"\r\n    }];\r\n    static props: IPropsMeta<P> = {\r\n        fftSize: {\r\n            type: \"number\",\r\n            default: 2048,\r\n            description: \"The size of the FFT to be used: power of 2\"\r\n        },\r\n        minDecibels: {\r\n            type: \"number\",\r\n            default: -100,\r\n            description: \"The minimum power value in the scaling range for the FFT analysis data\"\r\n        },\r\n        maxDecibels: {\r\n            type: \"number\",\r\n            default: -10,\r\n            description: \"The maximum power value in the scaling range for the FFT analysis data\"\r\n        },\r\n        smoothingTimeConstant: {\r\n            type: \"number\",\r\n            default: 0.8,\r\n            description: \"The averaging constant with the last analysis frame\"\r\n        }\r\n    };\r\n    _ = { node: this.audioCtx.createAnalyser() };\r\n    inletAudioConnections = [{ node: this.node, index: 0 }];\r\n    outletAudioConnections = [{ node: this.node, index: 0 }];\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 6;\r\n            this.outlets = 6;\r\n            this.node.channelInterpretation = \"discrete\";\r\n            handleProps(this.box.props);\r\n        });\r\n        const handleProps = (props: Partial<P>) => {\r\n            try {\r\n                if (typeof props.fftSize === \"number\") this.node.fftSize = props.fftSize;\r\n                if (typeof props.minDecibels === \"number\") this.node.minDecibels = props.minDecibels;\r\n                if (typeof props.maxDecibels === \"number\") this.node.maxDecibels = props.maxDecibels;\r\n                if (typeof props.smoothingTimeConstant === \"number\") this.node.smoothingTimeConstant = props.smoothingTimeConstant;\r\n            } catch (e) {\r\n                this.error((e as Error).message);\r\n            }\r\n        };\r\n        this.on(\"updateProps\", handleProps);\r\n        this.on(\"inlet\", ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (isBang(data)) this.outlet(5, this.node);\r\n            } else if (inlet === 5) {\r\n                if (typeof data === \"object\") {\r\n                    const props = data as I[5];\r\n                    try {\r\n                        if (typeof props.fftSize === \"number\") this.node.fftSize = props.fftSize;\r\n                        if (typeof props.minDecibels === \"number\") this.node.minDecibels = props.minDecibels;\r\n                        if (typeof props.maxDecibels === \"number\") this.node.maxDecibels = props.maxDecibels;\r\n                        if (typeof props.smoothingTimeConstant === \"number\") this.node.smoothingTimeConstant = props.smoothingTimeConstant;\r\n                    } catch (e) {\r\n                        this.error((e as Error).message);\r\n                    }\r\n                } else {\r\n                    this.error(\"Invalid options\");\r\n                }\r\n            } else {\r\n                try {\r\n                    if (inlet === 1) {\r\n                        this.node.getFloatTimeDomainData(data as I[1]);\r\n                        this.outlet(1, data as I[1]);\r\n                    } else if (inlet === 2) {\r\n                        this.node.getByteTimeDomainData(data as I[2]);\r\n                        this.outlet(2, data as I[2]);\r\n                    } else if (inlet === 3) {\r\n                        this.node.getFloatFrequencyData(data as I[3]);\r\n                        this.outlet(3, data as I[3]);\r\n                    } else if (inlet === 4) {\r\n                        this.node.getByteFrequencyData(data as I[4]);\r\n                        this.outlet(4, data as I[4]);\r\n                    }\r\n                } catch (e) {\r\n                    this.error((e as Error).message);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","import WebAudioObject from \"./base\";\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class AnyNode extends WebAudioObject<AudioNode, {}, [AudioNode, ...null[]], null[]> {\n    static description = \"WebAudio AudioNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, AudioNode instance to set the node.\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"Node connection\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }];\n    _ = { node: undefined as AudioNode };\n    handleInlet = ({ data, inlet }: { data: any; inlet: number }) => {\n        if (inlet === 0) {\n            try {\n                if (data instanceof AudioNode) {\n                    this.disconnectAudio();\n                    this._.node = data;\n                    const inlets = this.node.numberOfInputs || 1;\n                    const outlets = this.node.numberOfOutputs;\n                    const factoryMeta = AnyNode.meta as this[\"meta\"];\n                    const inlet0 = factoryMeta.inlets[0];\n                    const inlet1 = factoryMeta.inlets[1];\n                    const outlet0 = factoryMeta.inlets[0];\n                    this.inletAudioConnections = [{ node: this.node, index: 0 }];\n                    factoryMeta.inlets = [inlet0];\n                    for (let i = 1; i < inlets; i++) {\n                        factoryMeta.inlets[i] = inlet1;\n                    }\n                    for (let i = 0; i < outlets; i++) {\n                        factoryMeta.outlets[i] = outlet0;\n                    }\n                    for (let i = 0; i < this.node.numberOfInputs; i++) {\n                        this.inletAudioConnections[i] = { node: this.node, index: i };\n                    }\n                    for (let i = 0; i < this.node.numberOfOutputs; i++) {\n                        this.outletAudioConnections[i] = { node: this.node, index: i };\n                    }\n                    this.setMeta(factoryMeta);\n                    this.inlets = inlets;\n                    this.outlets = outlets;\n                    this.connectAudio();\n                }\n            } catch (e) {\n                this.error((e as Error).message);\n                return this;\n            }\n        }\n        return this;\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"inlet\", this.handleInlet);\n    }\n}\n","import { Bang, isBang } from \"../sdk\";\r\nimport WebAudioObject from \"./base\";\r\nimport type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\n\r\nexport interface Constraints extends MediaTrackConstraintSet {\r\n    deviceId: string;\r\n    autoGainControl: boolean;\r\n    channelCount: number;\r\n    echoCancellation: boolean;\r\n    latency: number;\r\n    noiseSuppression: boolean;\r\n    sampleRate: number;\r\n    sampleSize: number;\r\n}\r\nexport default class AudioIn extends WebAudioObject<MediaStreamAudioSourceNode, { search: string; stream: MediaStream }, [string | Bang], [null, MediaStreamAudioSourceNode], [string], Constraints> {\r\n    static description = \"Get Audio input from device name or ID\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"anything\",\r\n        description: \"string to fetch device name or ID, bang to output Node\"\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"signal\",\r\n        description: \"Node connection\"\r\n    }, {\r\n        type: \"object\",\r\n        description: \"Instance: MediaStreamAudioSourceNode\"\r\n    }];\r\n    static args: IArgsMeta = [{\r\n        type: \"string\",\r\n        optional: false,\r\n        description: \"Device name or ID\"\r\n    }];\r\n    static props: IPropsMeta<Omit<Constraints, \"deviceId\">> = {\r\n        autoGainControl: {\r\n            type: \"boolean\",\r\n            default: false,\r\n            description: \"Automatic gain control\"\r\n        },\r\n        channelCount: {\r\n            type: \"number\",\r\n            default: undefined,\r\n            description: \"The number of independent channels of sound\"\r\n        },\r\n        echoCancellation: {\r\n            type: \"boolean\",\r\n            default: false,\r\n            description: \"Remove all the sound being played from the input signals recorded by the microphones\"\r\n        },\r\n        latency: {\r\n            type: \"number\",\r\n            default: undefined,\r\n            description: \"The latency or latency range, in seconds\"\r\n        },\r\n        noiseSuppression: {\r\n            type: \"boolean\",\r\n            default: false,\r\n            description: \"Noise suppression\"\r\n        },\r\n        sampleRate: {\r\n            type: \"number\",\r\n            default: undefined,\r\n            description: \"The sample rate in samples per second for the audio data\"\r\n        },\r\n        sampleSize: {\r\n            type: \"number\",\r\n            default: undefined,\r\n            description: \"The linear sample size in bits\"\r\n        }\r\n    };\r\n    _ = { node: undefined as MediaStreamAudioSourceNode, stream: undefined as MediaStream, search: undefined as string };\r\n    handleDeviceChange = async () => {\r\n        const devices = await navigator.mediaDevices.enumerateDevices();\r\n        const enums = devices.filter(d => d.kind === \"audioinput\").map(d => d.label || d.deviceId);\r\n        const { meta } = this;\r\n        meta.args[0] = { ...AudioIn.args[0], type: \"enum\", enums };\r\n        this.setMeta(meta);\r\n    };\r\n    newSearch = async (search?: string) => {\r\n        this._.search = search;\r\n        let deviceId: string;\r\n        if (search) {\r\n            const devices = await navigator.mediaDevices.enumerateDevices();\r\n            const device = devices.find(d => d.kind === \"audioinput\" && (d.deviceId === search || d.label === search));\r\n            if (device) deviceId = device.deviceId;\r\n        }\r\n        this._.stream = await navigator.mediaDevices.getUserMedia({ audio: this.getConstraints(deviceId) });\r\n        if (this._.stream) this.resetNode();\r\n    };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 2;\r\n        });\r\n        this.on(\"postInit\", () => {\r\n            const search = this.box.args[0];\r\n            navigator.mediaDevices.addEventListener(\"devicechange\", this.handleDeviceChange);\r\n            this.handleDeviceChange();\r\n            this.newSearch(search);\r\n        });\r\n        this.on(\"updateArgs\", (args: [string?]) => {\r\n            this.newSearch(args[0]);\r\n        });\r\n        this.on(\"updateProps\", () => {\r\n            this.newSearch(this._.search);\r\n        });\r\n        this.on(\"inlet\", async ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (!isBang(data)) {\r\n                    await this.newSearch(data);\r\n                }\r\n                if (this.node) this.outlet(1, this.node);\r\n            }\r\n        });\r\n        this.on(\"destroy\", () => {\r\n            navigator.mediaDevices.removeEventListener(\"devicechange\", this.handleDeviceChange);\r\n        });\r\n    }\r\n    getConstraints(deviceId?: string): Constraints {\r\n        return {\r\n            deviceId,\r\n            autoGainControl: this.getProp(\"autoGainControl\"),\r\n            channelCount: this.getProp(\"channelCount\"),\r\n            echoCancellation: this.getProp(\"echoCancellation\"),\r\n            latency: this.getProp(\"latency\"),\r\n            noiseSuppression: this.getProp(\"noiseSuppression\"),\r\n            sampleRate: this.getProp(\"sampleRate\"),\r\n            sampleSize: this.getProp(\"sampleSize\")\r\n        };\r\n    }\r\n    resetNode() {\r\n        this.disconnectAudio();\r\n        if (this._.stream) {\r\n            this.node = this.audioCtx.createMediaStreamSource(this._.stream);\r\n            this.node.channelInterpretation = \"discrete\";\r\n        }\r\n        this.outletAudioConnections[0] = { node: this.node, index: 0 };\r\n        this.connectAudio();\r\n    }\r\n}\r\n","import { React, Bang, DefaultUI, isBang } from \"../sdk\";\r\nimport WebAudioObject from \"./base\";\r\nimport AudioIn, { Constraints } from \"./AudioIn\";\r\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\n\r\nconst supportSetSinkId = window.MediaStreamAudioDestinationNode && HTMLMediaElement.prototype.setSinkId;\r\nexport default class AudioOut extends WebAudioObject<MediaStreamAudioDestinationNode | AudioDestinationNode, { search?: string; audio?: HTMLAudioElement; msadn?: MediaStreamAudioDestinationNode }, [string | Bang], [null, MediaStreamAudioDestinationNode | AudioDestinationNode], [string], Constraints> {\r\n    static description = \"Get Audio output from device name or ID (if supported)\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"signal\",\r\n        description: \"Node connection, string to fetch device name or ID, bang to output Node\"\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"object\",\r\n        description: `Instance: ${supportSetSinkId ? \"MediaStreamAudioDestinationNode | \" : \"\"}AudioDestinationNode`\r\n    }];\r\n    static args = supportSetSinkId ? AudioIn.args : [];\r\n    static props = supportSetSinkId ? AudioIn.props : {};\r\n    static UI = supportSetSinkId ? class AudioOutUI extends DefaultUI<AudioOut> {\r\n        refContainer = React.createRef<HTMLDivElement>();\r\n        componentDidMount() {\r\n            super.componentDidMount();\r\n            const div = this.refContainer.current;\r\n            const { audio } = this.object._;\r\n            if (div && audio) {\r\n                audio.style.display = \"none\";\r\n                div.appendChild(audio);\r\n            }\r\n        }\r\n        render() {\r\n            const textContainerProps = { ...this.props.textContainerProps, ref: this.refContainer };\r\n            return (\r\n                <DefaultUI textContainerProps={textContainerProps} {...this.props} />\r\n            );\r\n        }\r\n    } : DefaultUI;\r\n    _ = supportSetSinkId ? { node: this.audioCtx.destination, msadn: this.audioCtx.createMediaStreamDestination(), audio: new Audio(), search: undefined as string } : { node: this.audioCtx.destination };\r\n    inletAudioConnections = [{ node: this.node, index: 0 }];\r\n    handleDeviceChange = async () => {\r\n        const devices = await navigator.mediaDevices.enumerateDevices();\r\n        const enums = devices.filter(d => d.kind === \"audiooutput\").map(d => d.label || d.deviceId);\r\n        const { meta } = this;\r\n        meta.args[0] = { ...AudioOut.args[0], type: \"enum\", enums };\r\n        this.setMeta(meta);\r\n    };\r\n    newSearch = async (search?: string) => {\r\n        if (!supportSetSinkId) return;\r\n        this._.search = search;\r\n        if (!search || search === \"default\") {\r\n            this.resetNode();\r\n            return;\r\n        }\r\n        const { audio } = this._;\r\n        let deviceId = audio.sinkId || \"default\";\r\n        const devices = await navigator.mediaDevices.enumerateDevices();\r\n        const device = devices.find(d => d.kind === \"audiooutput\" && (d.deviceId === search || d.label === search));\r\n        if (device) deviceId = device.deviceId;\r\n        if (audio.sinkId !== deviceId) {\r\n            if (audio.played) audio.pause();\r\n            audio.setSinkId(deviceId);\r\n            audio.play();\r\n        }\r\n        this.resetNode(true);\r\n    };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 1;\r\n        });\r\n        this.on(\"postInit\", () => {\r\n            this.node.channelInterpretation = \"discrete\";\r\n            if (supportSetSinkId) {\r\n                this._.msadn.channelInterpretation = \"discrete\";\r\n                const { audio, msadn } = this._;\r\n                const { stream } = msadn;\r\n                if (\"srcObject\" in audio) audio.srcObject = stream;\r\n                else (audio as HTMLAudioElement).src = URL.createObjectURL(stream);\r\n                const search = this.box.args[0];\r\n                navigator.mediaDevices.addEventListener(\"devicechange\", this.handleDeviceChange);\r\n                this.on(\"destroy\", () => {\r\n                    navigator.mediaDevices.removeEventListener(\"devicechange\", this.handleDeviceChange);\r\n                });\r\n                this.handleDeviceChange();\r\n                this.newSearch(search);\r\n            }\r\n        });\r\n        this.on(\"updateArgs\", (args: [string]) => {\r\n            this.newSearch(args[0]);\r\n        });\r\n        this.on(\"updateProps\", () => {\r\n            this.newSearch(this._.search);\r\n        });\r\n        this.on(\"inlet\", async ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (!isBang(data)) {\r\n                    await this.newSearch(data);\r\n                }\r\n                if (this.node) this.outlet(1, this.node);\r\n            }\r\n        });\r\n    }\r\n    getConstraints(deviceId?: string): Constraints {\r\n        return {\r\n            deviceId,\r\n            autoGainControl: this.getProp(\"autoGainControl\"),\r\n            channelCount: this.getProp(\"channelCount\"),\r\n            echoCancellation: this.getProp(\"echoCancellation\"),\r\n            latency: this.getProp(\"latency\"),\r\n            noiseSuppression: this.getProp(\"noiseSuppression\"),\r\n            sampleRate: this.getProp(\"sampleRate\"),\r\n            sampleSize: this.getProp(\"sampleSize\")\r\n        };\r\n    }\r\n    resetNode(msadn?: boolean) {\r\n        if (msadn) {\r\n            if (this.node !== this._.msadn) {\r\n                this.disconnectAudio();\r\n                this.node = this._.msadn;\r\n                this.inletAudioConnections[0] = { node: this.node, index: 0 };\r\n                this.connectAudio();\r\n            }\r\n        } else {\r\n            if (this.node !== this.audioCtx.destination) {\r\n                this.disconnectAudio();\r\n                this.node = this.audioCtx.destination;\r\n                this.inletAudioConnections[0] = { node: this.node, index: 0 };\r\n                this.connectAudio();\r\n            }\r\n        }\r\n    }\r\n}\r\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport { decodeLine, TBPF } from \"../utils\";\nimport type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\ntype I = [Bang, TBPF, TBPF, TBPF, TBPF, BiquadFilterType];\nexport default class Biquad extends WebAudioObject<BiquadFilterNode, {}, I, [null, BiquadFilterNode], [], BiquadFilterOptions> {\n    static description = \"WebAudio BiquadFilterNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection (1 channel), bang to output BiquadFilterNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"frequency: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"detune: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"Q: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"gain: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"enum\",\n        enums: [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"peaking\", \"notch\", \"allpass\"],\n        description: 'type: \"lowpass\" | \"highpass\" | \"bandpass\" | \"lowshelf\" | \"highshelf\" | \"peaking\" | \"notch\" | \"allpass\"'\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection (1 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: BiquadFilterNode\"\n    }];\n    static props: IPropsMeta<BiquadFilterOptions> = {\n        frequency: {\n            type: \"number\",\n            default: 350,\n            description: \"Initial frequency\"\n        },\n        detune: {\n            type: \"number\",\n            default: 100,\n            description: \"Initial detune\"\n        },\n        Q: {\n            type: \"number\",\n            default: 100,\n            description: \"Initial Q\"\n        },\n        gain: {\n            type: \"number\",\n            default: 25,\n            description: \"Initial gain\"\n        },\n        type: {\n            type: \"enum\",\n            enums: [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"peaking\", \"notch\", \"allpass\"],\n            default: \"lowpass\",\n            description: 'Initial type: \"lowpass\" | \"highpass\" | \"bandpass\" | \"lowshelf\" | \"highshelf\" | \"peaking\" | \"notch\" | \"allpass\"'\n        }\n    };\n    static isBiquadFilterType = (x: any): x is BiquadFilterType => [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"peaking\", \"notch\", \"allpass\"].indexOf(x) >= 0;\n    _ = { node: this.audioCtx.createBiquadFilter() };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.frequency }, { node: this.node.detune }, { node: this.node.Q }, { node: this.node.gain }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 6;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n            handleProps(this.box.props);\n        });\n        const handleProps =  (props: Partial<BiquadFilterOptions>) => {\n            const paramMap = [\"frequency\", \"detune\", \"Q\", \"gain\"] as const;\n            paramMap.forEach((key) => {\n                try {\n                    if (typeof props[key] === \"number\") this.node[key].setValueAtTime(props[key], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            });\n            if (typeof props.type === \"string\") {\n                try {\n                    this.node.type = props.type;\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        }\n        this.on(\"updateProps\", handleProps);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            const paramMap = [\"frequency\", \"detune\", \"Q\", \"gain\"] as const;\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 5) {\n                if (Biquad.isBiquadFilterType(data)) this.node.type = data;\n            } else if (inlet > 0 && inlet < 5) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node[paramMap[inlet - 1]], bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang, PatcherAudio } from \"../sdk\";\nimport { decodeLine, TBPF } from \"../utils\";\nimport type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\ntype I = [Bang | boolean | number | PatcherAudio | AudioBuffer, TBPF, TBPF, boolean, number, number];\ninterface P extends Omit<Required<AudioBufferSourceOptions>, \"buffer\"> {}\ninterface S {\n    node: AudioBufferSourceNode;\n    playing: boolean;\n}\n\nexport default class BufferSrc extends WebAudioObject<AudioBufferSourceNode, S, I, [null, Bang, AudioBufferSourceNode], [], P> {\n    static description = \"WebAudio AudioBufferSourceNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"Bang to output AudioBufferSourceNode instance, boolean/number to start/stop, AudioBuffer/PatcherAudio to set buffer\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"playbackRate: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"detune: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"boolean\",\n        description: \"loop\"\n    }, {\n        isHot: false,\n        type: \"number\",\n        description: \"loopStart (seconds)\"\n    }, {\n        isHot: false,\n        type: \"number\",\n        description: \"loopEnd (seconds)\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: AudioBufferSourceNode\"\n    }];\n    static props: IPropsMeta<P> = {\n        detune: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial detune, detuning of playback in cents\"\n        },\n        playbackRate: {\n            type: \"number\",\n            default: 1,\n            description: \"Initial playbackRate, The speed at which to render the audio stream\"\n        },\n        loop: {\n            type: \"boolean\",\n            default: false,\n            description: \"Initial loop, Indicates if the region of audio data designated by loopStart and loopEnd should be played continuously in a loop\"\n        },\n        loopStart: {\n            type: \"number\",\n            default: 0,\n            description: \"An optional playhead position where looping should begin if the loop attribute is true. If <=0 or > duration, loop will end at the end of the buffer.\"\n        },\n        loopEnd: {\n            type: \"number\",\n            default: 0,\n            description: \"An optional playhead position where looping should end if the loop attribute is true. If <=0 or > duration, loop will end at the end of the buffer.\"\n        }\n    };\n    _: S = { node: this.audioCtx.createBufferSource(), playing: false };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.playbackRate }, { node: this.node.detune }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    handleEnded = () => {\n        this.outlet(1, new Bang());\n        this.resetNode();\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 6;\n            this.outlets = 2;\n            this.node.addEventListener(\"ended\", this.handleEnded);\n            handleProps(this.box.props);\n        });\n        const handleProps = (props: Partial<P>) => {\n            const paramMap = [\"playbackRate\", \"detune\"] as const;\n            const numberParamMap = [\"loopStart\", \"loopEnd\"] as const;\n            const booleanParamMap = [\"loop\"] as const;\n            try {\n                paramMap.forEach((key) => {\n                    if (typeof props[key] === \"number\") this.node[key].setValueAtTime(props[key], this.audioCtx.currentTime);\n                });\n                numberParamMap.forEach((key) => {\n                    if (typeof props[key] === \"number\") this.node[key] = props[key];\n                });\n                booleanParamMap.forEach((key) => {\n                    if (typeof props[key] === \"boolean\") this.node[key] = props[key];\n                });\n            } catch (e) {\n                this.error(e.message);\n            }\n        }\n        this.on(\"updateProps\", handleProps);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            const paramMap = [\"playbackRate\", \"detune\"] as const;\n            if (inlet === 0) {\n                if (isBang(data)) {\n                    this.outlet(2, this.node);\n                } else if (typeof data === \"boolean\" || typeof data === \"number\") {\n                    if (data) {\n                        if (!this._.playing) {\n                            this.node.start();\n                            this._.playing = true;\n                        }\n                    } else {\n                        if (this._.playing) {\n                            this.node.stop();\n                            this.resetNode();\n                        }\n                    }\n                } else if (data instanceof AudioBuffer) {\n                    if (data !== this.node.buffer) this.resetNode(data);\n                } else if (data instanceof PatcherAudio) {\n                    if (data.audioBuffer !== this.node.buffer) this.resetNode(data.audioBuffer);\n                }\n            } else if (inlet >= 1 && inlet <= 2) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node[paramMap[inlet - 1]], bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            } else if (inlet === 3) {\n                if (typeof data === \"boolean\") {\n                    try {\n                        this.node.loop = data;\n                    } catch (e) {\n                        this.error(e.message);\n                    }\n                }\n            } else if (inlet > 3) {\n                if (typeof data === \"number\") {\n                    try {\n                        if (inlet === 4) this.node.loopStart = data;\n                        else if (inlet === 5) this.node.loopEnd = data;\n                    } catch (e) {\n                        this.error(e.message);\n                    }\n                }\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this._.playing) this.node.stop();\n            this.node.removeEventListener(\"ended\", this.handleEnded);\n        });\n    }\n    resetNode(bufferIn?: AudioBuffer) {\n        this.disconnectAudio();\n        this._.playing = false;\n        this.node.removeEventListener(\"ended\", this.handleEnded);\n        const { loop, loopStart, loopEnd } = this.node;\n        const buffer = bufferIn || this.node.buffer;\n        const playbackRate = this.node.playbackRate.value;\n        const detune = this.node.detune.value;\n        this.node = this.audioCtx.createBufferSource();\n        this.node.buffer = buffer;\n        this.node.loop = loop;\n        this.node.loopStart = loopStart;\n        this.node.loopEnd = loopEnd;\n        this.node.playbackRate.setValueAtTime(playbackRate, this.audioCtx.currentTime);\n        this.node.detune.setValueAtTime(detune, this.audioCtx.currentTime);\n        this.node.addEventListener(\"ended\", this.handleEnded);\n        this.inletAudioConnections[0] = { node: this.node, index: 0 };\n        this.inletAudioConnections[1] = { node: this.node.playbackRate };\n        this.inletAudioConnections[2] = { node: this.node.detune };\n        this.outletAudioConnections[0] = { node: this.node, index: 0 };\n        this.connectAudio();\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport { decodeLine, TBPF } from \"../utils\";\nimport type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\ntype I = [Bang, TBPF, TBPF, TBPF, TBPF, TBPF];\nexport default class Compressor extends WebAudioObject<DynamicsCompressorNode, {}, I, [null, DynamicsCompressorNode], [], DynamicsCompressorOptions> {\n    static description = \"WebAudio DynamicsCompressorNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection (1 channel), bang to output DynamicsCompressorNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"threshold: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"knee: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"ratio: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"attack: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"release: bpf or node connection\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection (1 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: DynamicsCompressorNode\"\n    }];\n    static props: IPropsMeta<DynamicsCompressorOptions> = {\n        threshold: {\n            type: \"number\",\n            default: -24,\n            description: \"Initial threshold\"\n        },\n        knee: {\n            type: \"number\",\n            default: 30,\n            description: \"Initial knee\"\n        },\n        ratio: {\n            type: \"number\",\n            default: 12,\n            description: \"Initial ratio\"\n        },\n        attack: {\n            type: \"number\",\n            default: 0.003,\n            description: \"Initial attack\"\n        },\n        release: {\n            type: \"number\",\n            default: 0.25,\n            description: \"Initial release\"\n        }\n    };\n    _ = { node: this.audioCtx.createDynamicsCompressor() };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.threshold }, { node: this.node.knee }, { node: this.node.ratio }, null, { node: this.node.attack }, { node: this.node.release }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 6;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n            handleProps(this.box.props);\n        });\n        const handleProps = (props: Partial<DynamicsCompressorOptions>) => {\n            const paramMap = [\"threshold\", \"knee\", \"ratio\", \"attack\", \"release\"] as const;\n            paramMap.forEach((key) => {\n                try {\n                    if (typeof props[key] === \"number\") this.node[key].setValueAtTime(props[key], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            });\n        }\n        this.on(\"updateProps\", handleProps);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            const paramMap = [\"threshold\", \"knee\", \"ratio\", \"attack\", \"release\"] as const;\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet > 0 && inlet < 6) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node[paramMap[inlet - 1]], bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport { decodeLine, TBPF } from \"../utils\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Constant extends WebAudioObject<ConstantSourceNode, {}, [Bang, TBPF], [null, ConstantSourceNode], [number]> {\n    static description = \"WebAudio ConstantSourceNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"bang\",\n        description: \"Output ConstantSourceNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"offset: bpf or node connection\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection (1 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: ConstantSourceNode\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        description: \"Initial offset\",\n        default: 1\n    }];\n    _ = { node: this.audioCtx.createConstantSource() };\n    inletAudioConnections = [null, { node: this.node.offset }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n            handleArgs(this.args);\n            this.node.start();\n        });\n        const handleArgs = (args: [number?]) => {\n            if (typeof args[0] === \"number\") {\n                try {\n                    this.node.offset.setValueAtTime(args[0], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        }\n        this.on(\"updateArgs\", handleArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node.offset, bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang, PatcherAudio } from \"../sdk\";\nimport type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\ntype I = [Bang, AudioBuffer | PatcherAudio, boolean];\ntype O = [null, ConvolverNode];\ninterface P {\n    normalize: boolean;\n}\n\nexport default class Convolver extends WebAudioObject<ConvolverNode, {}, I, O, [], P> {\n    static description = \"WebAudio ConvolverNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output ConvolverNode instance\"\n    }, {\n        isHot: true,\n        type: \"object\",\n        description: \"buffer (2-4 channels): AudioBuffer\"\n    }, {\n        isHot: true,\n        type: \"boolean\",\n        description: \"normalize: boolean\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection (2-4 channels)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: ConvolverNode\"\n    }];\n    static props: IPropsMeta<P> = {\n        normalize: {\n            type: \"boolean\",\n            default: true,\n            description: \"Controls whether the impulse response from the buffer will be scaled by an equal-power normalization\"\n        }\n    };\n    _ = { node: this.audioCtx.createConvolver() };\n    inletAudioConnections = [{ node: this.node, index: 0 }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 3;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n            handleProps(this.box.props);\n        });\n        const handleProps = (props: Partial<P>) => {\n            try {\n                if (typeof props.normalize === \"boolean\") this.node.normalize = props.normalize;\n            } catch (e) {\n                this.error((e as Error).message);\n            }\n        }\n        this.on(\"updateProps\", handleProps);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                if (data instanceof AudioBuffer) {\n                    try {\n                        this.node.buffer = data;\n                    } catch (e) {\n                        this.error((e as Error).message);\n                    }\n                } else if (data instanceof PatcherAudio) {\n                    try {\n                        this.node.buffer = data.audioBuffer;\n                    } catch (e) {\n                        this.error((e as Error).message);\n                    }\n                } else {\n                    this.error(\"Invalid ArrayBuffer\");\n                }\n            } else if (inlet === 2) {\n                if (typeof data === \"boolean\") {\n                    try {\n                        this.node.normalize = data;\n                    } catch (e) {\n                        this.error((e as Error).message);\n                    }\n                }\n            }\n        });\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport { decodeLine, TBPF } from \"../utils\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Delay extends WebAudioObject<DelayNode, {}, [Bang, TBPF], [null, DelayNode], [number]> {\n    static description = \"WebAudio DelayNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output DelayNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"delayTime: bpf or node connection\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: DelayNode\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        description: \"Initial delayTime\"\n    }];\n    _ = { node: this.audioCtx.createDelay() };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.delayTime }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n            handleArgs(this.args);\n        });\n        const handleArgs = (args: [number?]) => {\n            if (typeof args[0] === \"number\") {\n                try {\n                    this.node.delayTime.setValueAtTime(args[0], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        }\n        this.on(\"updateArgs\", handleArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node.delayTime, bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Destination extends WebAudioObject<AudioDestinationNode, {}, [Bang], [AudioDestinationNode]> {\n    static description = \"WebAudio DestinationNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output DestinationNode instance\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"object\",\n        description: \"Instance: DestinationNode\"\n    }];\n    _ = { node: this.audioCtx.destination };\n    inletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n            this.node.channelInterpretation = \"discrete\";\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(0, this.node);\n            }\n        });\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport { decodeLine, TBPF } from \"../utils\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Gain extends WebAudioObject<GainNode, {}, [Bang, TBPF], [null, GainNode], [number]> {\n    static description = \"WebAudio GainNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output GainNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"gain: bpf or node connection\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: GainNode\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        description: \"Initial gain\",\n        default: 1\n    }];\n    _ = { node: this.audioCtx.createGain() };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.gain }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n            handleArgs(this.args);\n        });\n        const handleArgs = (args: [number?]) => {\n            if (typeof args[0] === \"number\") {\n                try {\n                    this.node.gain.setValueAtTime(args[0], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        }\n        this.on(\"updateArgs\", handleArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node.gain, bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport { isNumberArray } from \"../utils\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\ntype I = [Bang, number[], number[]];\ntype A = [number[], number[]];\n\nexport default class IIRFilter extends WebAudioObject<IIRFilterNode, { feedforward: number[]; feedback: number[] }, I, [null, IIRFilterNode], A, {}> {\n    static description = \"WebAudio IIRFilterNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection (1 channel), bang to output IIRFilterNode instance\"\n    }, {\n        isHot: false,\n        type: \"object\",\n        description: \"feedforward, A sequence of coefficients, change will reconstruct the node: number[]\"\n    }, {\n        isHot: false,\n        type: \"object\",\n        description: \"feedback, A sequence of coefficients, change will reconstruct the node: number[]\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection (1 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: IIRFilterNode\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"object\",\n        optional: false,\n        default: [],\n        description: \"feedforward, A sequence of coefficients: number[]\"\n    }, {\n        type: \"object\",\n        optional: false,\n        default: [],\n        description: \"feedback, A sequence of coefficients: number[]\"\n    }];\n    _ = { node: undefined as IIRFilterNode, feedforward: [] as number[], feedback: [] as number[] };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 3;\n            this.outlets = 2;\n            handleArgs(this.args);\n        });\n        const handleArgs = (args: Partial<A>) => {\n            if (isNumberArray(args[0])) this._.feedforward = args[0];\n            if (isNumberArray(args[1])) this._.feedback = args[1];\n            this.resetNode();\n        }\n        this.on(\"updateArgs\", handleArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                if (isNumberArray(data)) this._.feedforward = data;\n                this.resetNode();\n            } else if (inlet === 2) {\n                if (isNumberArray(data)) this._.feedback = data;\n                this.resetNode();\n            }\n        });\n    }\n    resetNode() {\n        this.disconnectAudio();\n        this.node = this.audioCtx.createIIRFilter(this._.feedforward, this._.feedback);\n        this.node.channelInterpretation = \"discrete\";\n        this.inletAudioConnections[0] = { node: this.node, index: 0 };\n        this.outletAudioConnections[0] = { node: this.node, index: 0 };\n        this.connectAudio();\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\ntype I = [Bang | HTMLMediaElement];\nexport default class Media extends WebAudioObject<MediaElementAudioSourceNode, { element: HTMLMediaElement }, I, [null, MediaElementAudioSourceNode], [], {}> {\n    static description = \"WebAudio MediaElementAudioSourceNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"object\",\n        description: \"HTMLMediaElement to construct node, bang to output MediaElementAudioSourceNode instance\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: MediaElementAudioSourceNode\"\n    }];\n    _ = { node: undefined as MediaElementAudioSourceNode, element: undefined as HTMLMediaElement };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 2;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) {\n                    if (this.node) this.outlet(1, this.node);\n                } else if (data instanceof HTMLMediaElement) {\n                    this._.element = data;\n                    this.resetNode();\n                    this.outlet(1, this.node);\n                }\n            }\n        });\n    }\n    resetNode() {\n        this.disconnectAudio();\n        this.node = this.audioCtx.createMediaElementSource(this._.element);\n        this.node.channelInterpretation = \"discrete\";\n        this.outletAudioConnections[0] = { node: this.node, index: 0 };\n        this.connectAudio();\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Merger extends WebAudioObject<ChannelMergerNode, {}, [Bang | number, ...null[]], [null, ChannelMergerNode], [number]> {\n    static description = \"WebAudio ChannelMergerNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output DestinationNode instance, number to change inputs\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"Node connection\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection (n channels)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: ChannelMergerNode\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        description: \"Number of Inputs\",\n        default: 6\n    }];\n    _ = { node: null as ChannelMergerNode };\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.outlets = 2;\n            handleArgs(this.args);\n        });\n        const handleArgs = (args: [number?]) => {\n            const channelCount = (typeof args[0] === \"number\" && ~~args[0]) > 0 ? ~~args[0] : 6;\n            this.resetNode(channelCount);\n        }\n        this.on(\"updateArgs\", handleArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (typeof data === \"number\") {\n                    const channelCount = ~~data > 0 ? ~~data : 6;\n                    if (this.node && channelCount !== this.node.numberOfInputs) this.resetNode(channelCount);\n                    this.outlet(1, this.node);\n                } else if (isBang(data)) this.outlet(1, this.node);\n            }\n        });\n    }\n    resetNode(channelCount: number) {\n        this.disconnectAudio();\n        this.node = this.audioCtx.createChannelMerger(channelCount);\n        this.node.channelInterpretation = \"discrete\";\n        const factoryMeta = Merger.meta as this[\"meta\"];\n        const bangInlet = factoryMeta.inlets[0];\n        const siganlInlet = factoryMeta.inlets[1];\n        this.inletAudioConnections = [{ node: this.node, index: 0 }];\n        this.outletAudioConnections = [{ node: this.node, index: 0 }];\n        factoryMeta.inlets = [bangInlet];\n        for (let i = 1; i < channelCount; i++) {\n            factoryMeta.inlets[i] = siganlInlet;\n            this.inletAudioConnections[i] = { node: this.node, index: i };\n        }\n        this.setMeta(factoryMeta);\n        this.inlets = channelCount;\n        this.connectAudio();\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport { decodeLine, TBPF } from \"../utils\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\ntype A = [number, OscillatorType];\ninterface P {\n    detune: number;\n}\n\nexport default class Oscillator extends WebAudioObject<OscillatorNode, {}, [Bang, TBPF, TBPF, OscillatorType], [null, OscillatorNode], A, P> {\n    static description = \"WebAudio OscillatorNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"bang\",\n        description: \"Output OscillatorNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"frequency: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"detune: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"enum\",\n        enums: [\"sine\", \"square\", \"sawtooth\", \"triangle\", \"custom\"],\n        description: 'type: \"sine\" | \"square\" | \"sawtooth\" | \"triangle\" | \"custom\"'\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection (1 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: OscillatorNode\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        default: 440,\n        description: \"Initial frequency\"\n    }, {\n        type: \"enum\",\n        enums: [\"sine\", \"square\", \"sawtooth\", \"triangle\", \"custom\"],\n        optional: true,\n        default: \"sine\",\n        description: 'Initial type: \"sine\" | \"square\" | \"sawtooth\" | \"triangle\" | \"custom\"'\n    }];\n    static props: IPropsMeta<P> = {\n        detune: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial detune\"\n        }\n    };\n    static isOscillatorType = (x: any): x is OscillatorType => x === \"sine\" || x === \"square\" || x === \"sawtooth\" || x === \"triangle\" || x === \"custom\";\n    _ = { node: this.audioCtx.createOscillator() };\n    inletAudioConnections = [null, { node: this.node.frequency }, { node: this.node.detune }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 4;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n            handleProps(this.box.props);\n            handleArgs(this.args);\n            this.node.start();\n        });\n        const handleProps = (props: Partial<P>) => {\n            if (typeof props.detune === \"number\") {\n                try {\n                    this.node.detune.setValueAtTime(props.detune, this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        }\n        this.on(\"updateProps\", handleProps);\n        const handleArgs = (args: Partial<A>) => {\n            if (typeof args[0] === \"number\") {\n                try {\n                    this.node.frequency.setValueAtTime(args[0], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n            if (typeof args[1] === \"string\") {\n                try {\n                    this.node.type = args[1];\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        }\n        this.on(\"updateArgs\", handleArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else {\n                try {\n                    if (inlet === 1) {\n                        const bpf = decodeLine(data as TBPF);\n                        this.applyBPF(this.node.frequency, bpf);\n                    } else if (inlet === 2) {\n                        const bpf = decodeLine(data as TBPF);\n                        this.applyBPF(this.node.detune, bpf);\n                    } else if (inlet === 3) {\n                        this.node.type = data as OscillatorType;\n                    }\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        });\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport { decodeLine, TBPF } from \"../utils\";\nimport type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\ntype I = [Bang, TBPF, TBPF, TBPF, TBPF, TBPF, TBPF, PannerOptions];\nexport default class Panner extends WebAudioObject<PannerNode, {}, I, [null, PannerNode], [], PannerOptions> {\n    static description = \"WebAudio PannerNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output PannerNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"orientationX: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"orientationY: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"orientationZ: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"positionX: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"positionY: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"positionZ: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"object\",\n        description: \"options: coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection (2 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: PannerNode\"\n    }];\n    static props: IPropsMeta<PannerOptions> = {\n        coneInnerAngle: {\n            type: \"number\",\n            default: 360,\n            description: \"Initial coneInnerAngle\"\n        },\n        coneOuterAngle: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial coneOuterAngle\"\n        },\n        coneOuterGain: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial coneOuterGain\"\n        },\n        distanceModel: {\n            type: \"enum\",\n            enums: [\"linear\", \"inverse\", \"exponential\"],\n            default: \"inverse\",\n            description: 'Initial distanceModel: \"linear\" | \"inverse\" | \"exponential\"'\n        },\n        maxDistance: {\n            type: \"number\",\n            default: 10000,\n            description: \"Initial maxDistance\"\n        },\n        orientationX: {\n            type: \"number\",\n            default: 1,\n            description: \"Initial orientationX\"\n        },\n        orientationY: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial orientationY\"\n        },\n        orientationZ: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial orientationZ\"\n        },\n        panningModel: {\n            type: \"enum\",\n            enums: [\"equalpower\", \"HRTF\"],\n            default: \"equalpower\",\n            description: 'Initial panningModel: \"equalpower\" | \"HRTF\"'\n        },\n        positionX: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial positionX\"\n        },\n        positionY: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial positionY\"\n        },\n        positionZ: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial positionZ\"\n        },\n        refDistance: {\n            type: \"number\",\n            default: 1,\n            description: \"Initial refDistance\"\n        },\n        rolloffFactor: {\n            type: \"number\",\n            default: 1,\n            description: \"Initial rolloffFactor\"\n        }\n    };\n    _ = { node: this.audioCtx.createPanner() };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.orientationX }, { node: this.node.orientationY }, { node: this.node.orientationZ }, null, { node: this.node.positionX }, { node: this.node.positionY }, { node: this.node.positionZ }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 8;\n            this.outlets = 2;\n            handleProps(this.props);\n            this.node.channelInterpretation = \"discrete\";\n        });\n        const handleProps = (props: Partial<PannerOptions>) => {\n            const paramMap = [\"orientationX\", \"orientationY\", \"orientationZ\", \"positionX\", \"positionY\", \"positionZ\"] as const;\n            const numberParamMap = [\"coneInnerAngle\", \"coneOuterAngle\", \"coneOuterGain\", \"maxDistance\", \"refDistance\", \"rolloffFactor\"] as const;\n            try {\n                paramMap.forEach((key) => {\n                    if (typeof props[key] === \"number\") this.node[key].setValueAtTime(props[key], this.audioCtx.currentTime);\n                });\n                numberParamMap.forEach((key) => {\n                    if (typeof props[key] === \"number\") this.node[key] = props[key];\n                });\n                if (typeof props.distanceModel === \"string\") this.node.distanceModel = props.distanceModel;\n                if (typeof props.panningModel === \"string\") this.node.panningModel = props.panningModel;\n            } catch (e) {\n                this.error(e.message);\n            }\n        }\n        this.on(\"updateProps\", handleProps);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            const paramMap = [\"orientationX\", \"orientationY\", \"orientationZ\", \"positionX\", \"positionY\", \"positionZ\"] as const;\n            const numberParamMap = [\"coneInnerAngle\", \"coneOuterAngle\", \"coneOuterGain\", \"maxDistance\", \"refDistance\", \"rolloffFactor\"] as const;\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet > 0 && inlet < 7) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node[paramMap[inlet - 1]], bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            } else if (inlet === 7) {\n                if (typeof data === \"object\") {\n                    const props = data as PannerOptions;\n                    try {\n                        paramMap.forEach((key) => {\n                            if (typeof props[key] === \"number\") this.node[key].setValueAtTime(props[key], this.audioCtx.currentTime);\n                        });\n                        numberParamMap.forEach((key) => {\n                            if (typeof props[key] === \"number\") this.node[key] = props[key];\n                        });\n                        if (typeof props.distanceModel === \"string\") this.node.distanceModel = props.distanceModel;\n                        if (typeof props.panningModel === \"string\") this.node.panningModel = props.panningModel;\n                    } catch (e) {\n                        this.error(e.message);\n                    }\n                }\n            }\n        });\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Splitter extends WebAudioObject<ChannelSplitterNode, {}, [Bang], (null | ChannelSplitterNode)[], [number]> {\n    static description = \"WebAudio ChannelSplitterNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output ChannelSplitterNode instance, number to change outputs\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection (1 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: ChannelSplitterNode\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        description: \"Number of Outputs\",\n        default: 6\n    }];\n    _ = { node: null as ChannelSplitterNode };\n    inletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            handleArgs(this.args);\n        });\n        const handleArgs = (args: [number?]) => {\n            const channelCount = (args && typeof args[0] === \"number\" && ~~args[0]) > 0 ? ~~args[0] : 6;\n            this.resetNode(channelCount);\n        };\n        this.on(\"updateArgs\", handleArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (typeof data === \"number\") {\n                    const channelCount = ~~data > 0 ? ~~data : 6;\n                    if (this.node && channelCount !== this.node.numberOfOutputs) this.resetNode(channelCount);\n                    this.outlet(this.outlets - 1, this.node);\n                } else if (isBang(data)) this.outlet(this.outlets - 1, this.node);\n            }\n        });\n    }\n    resetNode(channelCount: number) {\n        this.disconnectAudio();\n        this.node = this.audioCtx.createChannelSplitter(channelCount);\n        this.node.channelInterpretation = \"discrete\";\n        const factoryMeta = Splitter.meta as this[\"meta\"];\n        const signalOutlet = factoryMeta.outlets[0];\n        const nodeOutlet = factoryMeta.outlets[1];\n        this.inletAudioConnections = [{ node: this.node, index: 0 }];\n        this.outletAudioConnections = [];\n        for (let i = 0; i < channelCount; i++) {\n            factoryMeta.outlets[i] = signalOutlet;\n            this.outletAudioConnections[i] = { node: this.node, index: i };\n        }\n        factoryMeta.outlets[channelCount] = nodeOutlet;\n        this.setMeta(factoryMeta);\n        this.outlets = channelCount + 1;\n        this.connectAudio();\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport { decodeLine, TBPF } from \"../utils\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class StereoPanner extends WebAudioObject<StereoPannerNode, {}, [Bang, TBPF], [null, StereoPannerNode], [number]> {\n    static description = \"WebAudio StereoPannerNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output StereoPannerNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"pan: bpf or node connection\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: StereoPannerNode\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        description: \"Initial pan\",\n        default: 0\n    }];\n    _ = { node: this.audioCtx.createStereoPanner() };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.pan }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n            handleArgs(this.args);\n        });\n        const handleArgs = (args: [number?]) => {\n            if (typeof args[0] === \"number\") {\n                try {\n                    this.node.pan.setValueAtTime(args[0], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        };\n        this.on(\"updateArgs\", handleArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node.pan, bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class StreamDest extends WebAudioObject<MediaStreamAudioDestinationNode, {}, [Bang], [MediaStreamAudioDestinationNode, MediaStream]> {\n    static description = \"WebAudio MediaStreamAudioDestinationNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output MediaStreamAudioDestinationNode instance with its stream\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"object\",\n        description: \"Instance: MediaStreamAudioDestinationNode\"\n    }, {\n        type: \"object\",\n        description: \"Stream\"\n    }];\n    _ = { node: this.audioCtx.createMediaStreamDestination() };\n    inletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outletAll([this.node, this.node.stream]);\n            }\n        });\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\ntype I = [Bang | MediaStream];\nexport default class StreamSrc extends WebAudioObject<MediaStreamAudioSourceNode, { stream: MediaStream }, I, [null, MediaStreamAudioSourceNode], [], {}> {\n    static description = \"WebAudio MediaStreamAudioSourceNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"object\",\n        description: \"MediaStream to construct node, bang to output MediaStreamAudioSourceNode instance\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: MediaStreamAudioSourceNode\"\n    }];\n    _ = { node: undefined as MediaStreamAudioSourceNode, stream: undefined as MediaStream };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 2;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    this._.stream = data;\n                    this.resetNode();\n                }\n                if (this.node) this.outlet(1, this.node);\n            }\n        });\n    }\n    resetNode() {\n        this.disconnectAudio();\n        this.node = this.audioCtx.createMediaStreamSource(this._.stream);\n        this.node.channelInterpretation = \"discrete\";\n        this.outletAudioConnections[0] = { node: this.node, index: 0 };\n        this.connectAudio();\n    }\n}\n","import WebAudioObject from \"./base\";\nimport { Bang, isBang } from \"../sdk\";\nimport type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\ntype I = [Bang, Float32Array, OverSampleType];\ninterface P {\n    oversample: OverSampleType;\n}\n\nexport default class WaveShaper extends WebAudioObject<WaveShaperNode, {}, I, [null, WaveShaperNode], [], P> {\n    static description = \"WebAudio WaveShaperNode\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output WaveShaperNode instance\"\n    }, {\n        isHot: false,\n        type: \"object\",\n        description: \"curve: Float32Array\"\n    }, {\n        isHot: false,\n        type: \"enum\",\n        enums: [\"none\", \"2x\", \"4x\"],\n        description: 'oversample: \"none\" | \"2x\" | \"4x\"'\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: WaveShaperNode\"\n    }];\n    static props: IPropsMeta<P> = {\n        oversample: {\n            type: \"enum\",\n            enums: [\"none\", \"2x\", \"4x\"],\n            default: \"none\",\n            description: \"Initial oversample\"\n        }\n    };\n    _ = { node: this.audioCtx.createWaveShaper() };\n    inletAudioConnections = [{ node: this.node, index: 0 }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 3;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n            handleProps(this.box.props);\n        });\n        const handleProps = (props: Partial<P>) => {\n            try {\n                if (typeof props.oversample === \"string\") this.node.oversample = props.oversample;\n            } catch (e) {\n                this.error(e.message);\n            }\n        }\n        this.on(\"updateProps\", handleProps);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                try {\n                    if (data instanceof Float32Array) this.node.curve = data;\n                    else this.error(\"The curve is not a Float32Array.\");\n                } catch (e) {\n                    this.error(e.message);\n                }\n            } else if (inlet === 2) {\n                try {\n                    if (typeof data === \"string\") this.node.oversample = data as OverSampleType;\n                    else this.error(\"Incorrect oversample type.\");\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import { Bang, DefaultObject, isBang } from \"../sdk\";\r\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\n\r\nexport default class audioContext extends DefaultObject<{}, {}, [Bang], [AudioContext]> {\r\n    static description = \"Get currrent patcher's audio context\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"bang\",\r\n        description: \"Output current audio context\"\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"object\",\r\n        description: \"Current audio context\"\r\n    }];\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 1;\r\n        });\r\n        this.on(\"inlet\", ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (isBang(data)) this.outlet(0, this.patcher.audioCtx);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Bang, isBang, DefaultObject } from \"../sdk\";\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class audioWorklet extends DefaultObject<{}, {}, [Bang, string], [AudioWorklet, Bang]> {\n    static description = \"Get currrent patcher's audio worklet from context\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"bang\",\n        description: \"Output current audio worklet\"\n    }, {\n        isHot: true,\n        type: \"string\",\n        description: \"Code to add as module\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"object\",\n        description: \"Current audio worklet\"\n    }, {\n        type: \"bang\",\n        description: \"Output a bang while module is added\"\n    }];\n    audioWorklet: AudioWorklet;\n    handleInlet: (e: { data: any; inlet: number }) => Promise<void> = async ({ data, inlet }) => {\n        if (inlet === 0) {\n            if (isBang(data)) this.outlet(0, this.audioWorklet);\n        } else if (inlet === 1) {\n            if (typeof data === \"string\") {\n                try {\n                    const url = window.URL.createObjectURL(new Blob([data], { type: \"text/javascript\" }));\n                    await this.audioWorklet.addModule(url);\n                    this.outlet(1, new Bang());\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        }\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            if (!this.patcher.audioCtx.audioWorklet) this.error(\"AudioWorklet not found.\");\n            else this.audioWorklet = this.patcher.audioCtx.audioWorklet;\n        });\n        this.on(\"inlet\", this.handleInlet);\n    }\n}\n","import { author, name, version, description } from \"../index\";\r\nimport { Bang, DefaultObject } from \"../sdk\";\r\n\r\nexport default class WebAudioObject<\r\n    T extends AudioNode = AudioNode,\r\n    S = {},\r\n    I extends [Bang | any, ...any[]] = [Bang],\r\n    O extends (null | any | T)[] = [],\r\n    A extends any[] = any[],\r\n    P = {}\r\n> extends DefaultObject<{}, S, I, O, A, P> {\r\n    static package = name;\r\n    static icon = \"volume up\";\r\n    static author = author;\r\n    static version = version;\r\n    static description = description;\r\n    _: Partial<{ node: T }> & Record<string, any>;\r\n    set node(nodeIn: T) {\r\n        this._.node = nodeIn;\r\n    }\r\n    get node() {\r\n        return this._.node;\r\n    }\r\n}\r\n","import * as JSON from \"../package.json\";\n\nexport default JSON;\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    PatcherAudio,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    BaseUI,\r\n    DefaultObject,\r\n    DefaultUI,\r\n    generateRemotedObject,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    Bang,\r\n    isBang\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface PatcherAudio extends InstanceType<typeof PatcherAudio> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\n","\r\nexport type TBPF = string | number | number[] | number[][];\r\nexport type TBPFPoint = [number, number, number];\r\nexport type TStrictBPF = TBPFPoint[];\r\n\r\nexport const isNumberArray = (x: any): x is number[] => Array.isArray(x) && x.every(e => typeof e === \"number\");\r\n\r\n/**\r\n * A BPF can be described as a succesion of three number tuples.\r\n * i.e. `1 1 0.5 2 1 1` curve mode means go to 0 immediately then go to 1 in 1s with a curve of e^0.5, then go to 2 in 1s linear.\r\n * The function transform the string to number[][], i.e. `[[1, 1, 0.5], [2, 1, 1]]`\r\n */\r\n export const decodeBPF = (sIn: TBPF, tupleLength: number): number[][] => {\r\n    if (typeof sIn === \"number\") return [[sIn]];\r\n    if (isNumberArray(sIn)) return [sIn];\r\n    if (Array.isArray(sIn) && sIn.every(a => isNumberArray(a))) return sIn;\r\n    if (typeof sIn !== \"string\") throw new Error(\"Failed to decode curve.\");\r\n    const numbers = sIn.split(\" \").filter(s => !!s).map(s => +s);\r\n    if (numbers.find(v => !isFinite(v))) throw new Error(\"BPF contains invalid number.\");\r\n    const tuples: number[][] = [];\r\n    for (let i = 0; i < numbers.length; i++) {\r\n        const $tuple = ~~(i / tupleLength);\r\n        const $ = i % tupleLength;\r\n        if (!tuples[$tuple]) tuples[$tuple] = [];\r\n        tuples[$tuple][$] = numbers[i];\r\n    }\r\n    return tuples;\r\n};\r\nexport const decodeCurve = (sIn: TBPF) => decodeBPF(sIn, 3);\r\nexport const decodeLine = (sIn: TBPF) => decodeBPF(sIn, 2);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import audioContext from \"./objects/audioContext\";\nimport audioWorklet from \"./objects/audioWorklet\";\nimport AnyNode from \"./objects/AnyNode\";\nimport Constant from \"./objects/Constant\";\nimport Oscillator from \"./objects/Oscillator\";\nimport Destination from \"./objects/Destination\";\nimport Splitter from \"./objects/Splitter\";\nimport Merger from \"./objects/Merger\";\nimport Gain from \"./objects/Gain\";\nimport Analyser from \"./objects/Analyser\";\nimport Biquad from \"./objects/Biquad\";\nimport Convolver from \"./objects/Convolver\";\nimport Delay from \"./objects/Delay\";\nimport Compressor from \"./objects/Compressor\";\nimport IIRFilter from \"./objects/IIRFilter\";\nimport Media from \"./objects/Media\";\nimport StreamDest from \"./objects/StreamDestination\";\nimport StreamSrc from \"./objects/StreamSource\";\nimport Panner from \"./objects/Panner\";\nimport StereoPanner from \"./objects/StereoPanner\";\nimport WaveShaper from \"./objects/WaveShaper\";\nimport AudioIn from \"./objects/AudioIn\";\nimport AudioOut from \"./objects/AudioOut\";\nimport BufferSrc from \"./objects/BufferSource\";\n\nexport default async () => ({\n    audioContext,\n    audioWorklet,\n    \"node~\": AnyNode,\n    \"constant~\": Constant,\n    \"oscillator~\": Oscillator,\n    \"gain~\": Gain,\n    \"destination~\": Destination,\n    \"splitter~\": Splitter,\n    \"merger~\": Merger,\n    \"analyser~\": Analyser,\n    \"biquad~\": Biquad,\n    \"convolver~\": Convolver,\n    \"delay~\": Delay,\n    \"compressor~\": Compressor,\n    \"iir~\": IIRFilter,\n    \"media~\": Media,\n    \"streamdest~\": StreamDest,\n    \"streamsrc~\": StreamSrc,\n    \"panner~\": Panner,\n    \"pan~\": StereoPanner,\n    \"waveshaper~\": WaveShaper,\n    \"audioIn~\": AudioIn,\n    \"audioOut~\": AudioOut,\n    \"plugin~\": Plugin,\n    \"bufferSource~\": BufferSrc,\n});"],"names":[],"sourceRoot":""}